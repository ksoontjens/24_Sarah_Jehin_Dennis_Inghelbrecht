package hellotvxlet;

import java.awt.event.KeyEvent;
import java.io.IOException;
import javax.tv.xlet.Xlet;
import javax.tv.xlet.XletContext;
import javax.tv.xlet.XletStateChangeException;
import org.bluray.ui.event.HRcEvent;
import org.davic.resources.ResourceClient;
import org.davic.resources.ResourceProxy;
import org.dvb.event.EventManager;
import org.dvb.event.UserEvent;
import org.dvb.event.UserEventListener;
import org.dvb.event.UserEventRepository;
import org.havi.ui.HBackgroundConfigTemplate;
import org.havi.ui.HBackgroundDevice;
import org.havi.ui.HBackgroundImage;
import org.havi.ui.HConfigurationException;
import org.havi.ui.HPermissionDeniedException;
import org.havi.ui.HScene;
import org.havi.ui.HSceneFactory;
import org.havi.ui.HScreen;
import org.havi.ui.HStaticText;
import org.havi.ui.HStillImageBackgroundConfiguration;
import org.havi.ui.event.HBackgroundImageEvent;
import org.havi.ui.event.HBackgroundImageListener;


public class HelloTVXlet implements Xlet, ResourceClient, HBackgroundImageListener, UserEventListener {

    HStillImageBackgroundConfiguration hsbic;
    HBackgroundImage image1;
    HBackgroundImage image2;
    HBackgroundImage image3;
    HBackgroundImage image4;
    int imageteller = 0;
    int cursor = 1;
    String lijst;
    HStaticText hst;
    
    public void destroyXlet(boolean unconditional) throws XletStateChangeException {
        
    }

    public void initXlet(XletContext ctx) throws XletStateChangeException {
        HScreen screen = HScreen.getDefaultHScreen();
        HBackgroundDevice hbackgrounddev = screen.getDefaultHBackgroundDevice();
        
        boolean gereserveerd = hbackgrounddev.reserveDevice(this);
        if(gereserveerd) System.out.println("backgrounddev gereserveerd");
        
        //configuratie:
        HBackgroundConfigTemplate hbct = new HBackgroundConfigTemplate();
        hbct.setPreference(HBackgroundConfigTemplate.STILL_IMAGE, HBackgroundConfigTemplate.REQUIRED);
        
        hsbic = (HStillImageBackgroundConfiguration)hbackgrounddev.getBestConfiguration(hbct);
        try {

            hbackgrounddev.setBackgroundConfiguration(hsbic);
        } catch (SecurityException ex) {
            ex.printStackTrace();
        } catch (HPermissionDeniedException ex) {
            ex.printStackTrace();
        } catch (HConfigurationException ex) {
            ex.printStackTrace();
        }
        
        //images inladen (m2v files)
        image1 = new HBackgroundImage("pizza1.m2v");
        image2 = new HBackgroundImage("pizza2.m2v");
        image3 = new HBackgroundImage("pizza3.m2v");
        image4 = new HBackgroundImage("pizza4.m2v");
        
        //van het moment dat de image geladen is ga je imageLoaded uitvoeren (hieronder ergens)
        image1.load(this); //bovenaan : implements HBackgroundImageListener
        image2.load(this);
        image3.load(this);
        image4.load(this);
        
        
        //maak een UserEventRepository
        UserEventRepository rep = new UserEventRepository("naam");
        //voeg daar allArrowKeys aan toe
        rep.addAllArrowKeys();
        
        //enter toevoegen (voor als er op ok wordt gedrukt)
        rep.addKey(HRcEvent.VK_ENTER);
        
        //vraag link naar een Eventmanager op met .getInstance()
        //registreer de UserEventRepository op de EventManager met addUserEventListener
        EventManager.getInstance().addUserEventListener(this, rep);
        //implementeer de interface UserEventListener op deze Xlet
        //vang de events op in een UserEventReceived
        
        
    }

    public void pauseXlet() {
        
    }

    public void startXlet() throws XletStateChangeException {
        
        lijst = "Orderlijst: \n";
        HScene scene = HSceneFactory.getInstance().getDefaultHScene();
        hst = new HStaticText(lijst, 400, 50, 300, 300);
        
        hst.setVerticalAlignment(hst.VALIGN_TOP);
        hst.setHorizontalAlignment(hst.HALIGN_LEFT);
        //om tekst toe te voegen in UserEventReceived
        hst.setTextContent(lijst+"regel1\n", hst.NORMAL_STATE);
        //vergeet niet om VK_ENTER toe te voegen aan de UserEventRepository
        
        scene.add(hst);
        scene.validate();
        scene.setVisible(true);
    }

    public boolean requestRelease(ResourceProxy proxy, Object requestData) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void release(ResourceProxy proxy) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void notifyRelease(ResourceProxy proxy) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void imageLoaded(HBackgroundImageEvent e) {
        System.out.println("image geladen");
        imageteller++;
        if(imageteller==4) System.out.println("Alles geladen!");
        try {
            hsbic.displayImage(image1);
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (HPermissionDeniedException ex) {
            ex.printStackTrace();
        } catch (HConfigurationException ex) {
            ex.printStackTrace();
        }
    }

    public void imageLoadFailed(HBackgroundImageEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void userEventReceived(UserEvent e) {
        if(e.getType() == KeyEvent.KEY_PRESSED){
            
            if(e.getCode() == HRcEvent.VK_ENTER) {
                if(cursor == 1)lijst=lijst+"Meat Lovers \n";
                if(cursor == 2)lijst=lijst+"Pepperoni Lovers \n";
                if(cursor == 3)lijst=lijst+"Cheese Lovers \n";
                if(cursor == 4)lijst=lijst+"Vegi Lovers \n";
                hst.setTextContent(lijst, hst.NORMAL_STATE);
            }
            
            if(e.getCode() == HRcEvent.VK_LEFT) {
                cursor--;
                if(cursor<1) cursor = 4;                
            }
            if(e.getCode()== HRcEvent.VK_RIGHT) {
                cursor++;
                if(cursor>4) cursor = 1;
            }
            
            try {
                
                if(imageteller == 4) { //als alles geladen is
                    if(cursor == 1) hsbic.displayImage(image1);
                    if(cursor == 2) hsbic.displayImage(image2);
                    if(cursor == 3) hsbic.displayImage(image3);
                    if(cursor == 4) hsbic.displayImage(image4);
                }
                
            }
            catch(Exception ex) {
                ex.printStackTrace();
            }
            
        }
    }


  
    
}
